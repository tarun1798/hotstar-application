name: Build and Deploy Hotstar App

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Build Docker image
      - name: Build Docker Image
        run: docker build -t hotstar-app:latest .
       

      # Step 3: Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 4: Verify AWS identity (optional for debugging)
      - name: Verify AWS identity
        run: aws sts get-caller-identity

      # Step 5: Authenticate Docker to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 \
          | docker login --username AWS --password-stdin ${{ secrets.ECR_REPO }}

      # Step 6: Tag & Push Docker image to Amazon ECR
      - name: Push Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker tag hotstar-app:latest ${{ secrets.ECR_REPO }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPO }}:$IMAGE_TAG

      # Step 7: Install kubectl
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      # Step 8: Configure kubectl to access EKS
      - name: Configure kubectl for EKS
        run: |
          aws eks update-kubeconfig \
            --region us-east-1 \
            --name my-eks-cluster

      # Step 9: Deploy to EKS using Kubernetes manifests
      - name: Deploy to EKS
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          kubectl set image deployment/hotstar-app hotstar-app=${{ secrets.ECR_REPO }}:$IMAGE_TAG
          kubectl apply -f K8S/
